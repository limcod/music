const isWin = /^win/.test(process.platform);
const fs = require('fs');
const path = require('path');
const gulp = require("gulp");
const minifyCss = require('gulp-minify-css');//压缩CSS为一行；
const htmlmin = require('gulp-htmlmin');//html压缩组件
const gulpRemoveHtml = require('gulp-remove-html');//标签清除
const removeEmptyLines = require('gulp-remove-empty-lines');//清除空白行
const compiler = require('google-closure-compiler').jsCompiler;
const closureCompiler = new compiler({
    compilation_level: 'SIMPLE',//ADVANCED
    module_resolution: "NODE",
    language_in: "ECMASCRIPT_2019",
    language_out: "ECMASCRIPT_2019",
    jscomp_warning: "*",
    env: "CUSTOM"
});
const buildBasePath = 'dist/';//构建输出的目录
const config = require('./package');

const asar = true; //是否asar打包
const allowToChangeInstallationDirectory = true; //是否允许用户修改安装为位置
let nConf = {//基础配置
    "devTools": true, //是否打开devTools
    "themeColor": "#333333", //默认颜色
    "appUrl": "http://127.0.0.1:3000/", //程序主访问地址
    "socketUrl": "http://127.0.0.1:3000/",// 程序socket访问地址
    "appSize": [800, 500],
    "dialogSize": [400, 150],
    "menuSize": [76, 94]
};

function findFileBySuffix(dirs, fileName) {
    let files = []
    let dirArray = fs.readdirSync(dirs)
    for (let d of dirArray) {
        let filePath = path.resolve(dirs, d)
        let stat = fs.statSync(filePath)
        if (stat.isDirectory()) {
            files = files.concat(findFileBySuffix(filePath, fileName))
        }
        if (stat.isFile() && path.extname(filePath) === fileName) {
            files.push(filePath)
        }
    }
    return files
}


gulp.task('retrieval', async () => {
    let retrievals = ['app', 'dialog', 'menu'];
    let views = {
        'app': {
            'global': {},
            'local': {},
            'subject': {}
        },
        'dialog': {
            'global': {},
            'local': {},
            'subject': {}
        },
        'menu': {
            'global': {},
            'local': {},
            'subject': {}
        }
    };
    for (let i of retrievals) {
        for (let s of findFileBySuffix(`src/views/${i}`, '.js')) {
            s = s.split(isWin ? __dirname + `\\src` : __dirname + `/src`)[1];
            let path = '..' + s.replace(/\\/g, '/');
            let name = path.slice(path.lastIndexOf('/') + 1, path.length - 3);
            if (path.indexOf(`${i}/components/global`) > -1) views[i]['global'][`${i}-global-${name}`] = path;
            else if (path.indexOf(`${i}/components/local`) > -1) views[i]['local'][`${i}-local-${name}`] = path;
            else views[i]['subject'][`${i}-subject-${name}`] = path;
        }
    }
    nConf.views = views;
    fs.writeFileSync(__dirname + '/src/lib/cfg/config.json', JSON.stringify(nConf, null, 2));

    config.build.asar = asar;
    config.build.nsis.allowToChangeInstallationDirectory = allowToChangeInstallationDirectory;
    fs.writeFileSync('./package.json', JSON.stringify(config, null, 2));
});

gulp.task('compress', async () => {
    //cfg
    gulp.src(['src/**/*.json', 'src/**/*.ico'])
        .pipe(gulp.dest(buildBasePath));
    //css
    gulp.src('src/**/*.css')
        .pipe(minifyCss())//压缩css到一样
        .pipe(gulp.dest(buildBasePath));//输出到css目录
    //js
    gulp.src('src/**/*.js')
        .pipe(gulp.dest(buildBasePath));
    //html
    gulp.src('src/**/*.html')
        .pipe(gulpRemoveHtml())//清除特定标签
        .pipe(removeEmptyLines({removeComments: true}))//清除空白行
        .pipe(htmlmin({
            removeComments: true,//清除HTML注释
            collapseWhitespace: true,//压缩HTML
            collapseBooleanAttributes: true,//省略布尔属性的值 <input checked="true"/> ==> <input />
            removeEmptyAttributes: true,//删除所有空格作属性值 <input id="" /> ==> <input />
            removeScriptTypeAttributes: true,//删除<script>的type="text/javascript"
            removeStyleLinkTypeAttributes: true,//删除<style>和<link>的type="text/css"
            minifyJS: true,//压缩页面JS
            minifyCSS: true//压缩页面CSS
        }))
        .pipe(gulp.dest(buildBasePath));

    //写入nsis  appData目录
    let nsh = "; Script generated by the HM NIS Edit Script Wizard.\n" +
        "\n" +
        "; HM NIS Edit Wizard helper defines custom install default dir\n" +
        "!macro preInit\n" +
        "    SetRegView 64\n" +
        "    WriteRegExpandStr HKLM \"${INSTALL_REGISTRY_KEY}\" InstallLocation \"$LOCALAPPDATA\\" + config.name + "\"\n" +
        "    WriteRegExpandStr HKCU \"${INSTALL_REGISTRY_KEY}\" InstallLocation \"$LOCALAPPDATA\\" + config.name + "\"\n" +
        "    SetRegView 32\n" +
        "    WriteRegExpandStr HKLM \"${INSTALL_REGISTRY_KEY}\" InstallLocation \"$LOCALAPPDATA\\" + config.name + "\"\n" +
        "    WriteRegExpandStr HKCU \"${INSTALL_REGISTRY_KEY}\" InstallLocation \"$LOCALAPPDATA\\" + config.name + "\"\n" +
        "!macroend";

    fs.writeFileSync(__dirname + '/resources/script/installer.nsh', nsh);

});

gulp.task('compiler', async () => {
    for (let i of findFileBySuffix(isWin ? __dirname + '\\dist' : __dirname + '/dist', '.js')) {
        if (i.indexOf('min.js') === -1) {
            let cc = await closureCompiler.run([{
                path: i,
                src: fs.readFileSync(i).toString(),
                sourceMap: null
            }]);
            fs.writeFileSync(i, cc['compiledFiles'][0].src);
        }
    }
    //-jar closure-compiler-v20200406.jar --js ${'src/main' + i} --js_output_file ${'dist' + i} --language_in=ECMASCRIPT_2018 --language_out=ECMASCRIPT_2018 --compilation_level=SIMPLE --jscomp_warning=* --env=CUSTOM --module_resolution=NODE
})
